#!/usr/bin/env roseus

(require :unittest "lib/llib/unittest.l")

(init-unit-test)

(deftest test-param-cache ()
  (assert (not (ros::has-param "~test")) "[cached ~test] (ros::has-param ~test) returns value")

  (assert (ros::has-param "test")  "[cached] (ros::has-parm test) failed")
  (let ((ret (ros::get-param "test")))
    (assert (string= "test_global" (setq as ret)) "[test] test_global != ~A" as))

  (assert (ros::has-param "/test") "[cached, /test] (ros::has-param /test) failed")
  (let ((ret (ros::get-param "/test")))
    (assert (string= "test_global" (setq as ret)) "[/test] test_global != ~A" as))
  )

(deftest test-param ()
  (ros::roseus "param_test")
  (assert (ros::has-param "~test") "[~test] (ros::has-param) failed")
  (let ((ret (ros::get-param "~test")))
    (assert (string= "test_private" (setq as ret)) "[~test] test_private != ~A" as))

  (assert (ros::has-param "test")  "[test] (ros::has-param) failed")
  (let ((ret (ros::get-param "test")))
    (assert (string= "test_ns" (setq as ret)) "[test] test_ns != ~A" as))

  (assert (ros::has-param "/test") "[/test] (ros::has-param) failed")
  (let ((ret (ros::get-param "/test")))
    (assert (string= "test_global" (setq as ret)) "[/test] test_global != ~A" as))

  (assert (ros::has-param "/test_dictionary") "[/test_dictionary] (ros::has-param) failed")
  (let ((ret (ros::get-param "/test_dictionary")))
    (let ((val (assoc "str_value" ret :test #'string=)))
      (assert val "str_value not found")
      (assert (string= (setq as (cdr val)) "00000") "\"00000\" != ~S" as))
    (let ((val (assoc "int_value" ret :test #'string=)))
      (assert val "int_value not found")
      (assert (= (setq as (cdr val)) 10000) "10000 != ~A" as))
    (let ((val (assoc "dbl_value" ret :test #'string=)))
      (assert val "dbl_value not found")
      (assert (= (setq as (cdr val)) 20000.0) "20000.0 != ~A" as))
    (let ((val (assoc "bool_value" ret :test #'string=)))
      (assert val "bool_value not found")
      (assert (eq (setq as (cdr val)) nil) "nil != ~A" as))
    (let ((val (assoc "list" ret :test #'string=)))
      (assert val "list not found")
      (let ((lst (cdr val)))
        (assert (listp (setq as lst)) "~A is not list" as)
        (assert (string= (setq as (elt lst 0)) "0") "\"0\" != ~S" as)
        (assert (= (setq as (elt lst 1)) 1) "1 != ~A" as)
        (assert (= (setq as (elt lst 2)) 2.0) "2.0 != ~A" as)
        (assert (eq (setq as (elt lst 3)) t) "t != ~A" as)
        ;; check list
        ;; check dictionary
        ))
    (let ((val (assoc "dictionary" ret :test #'string=)))
      (assert val "dictionary not found")
      (let ((lst (cdr val)))
        (assert (listp (setq as lst)) "~A is not list" as)
        (let ((v (assoc "key_str" lst :test #'string=)))
          (let ((lst (cdr v)))
            (assert (string= (setq as lst) "0000") "\"0000\" != ~S" as)))
        (let ((v (assoc "key_int" lst :test #'string=)))
          (let ((lst (cdr v)))
            (assert (= (setq as lst) 1000) "1000 != ~A" as)))
        (let ((v (assoc "key_dbl" lst :test #'string=)))
          (let ((lst (cdr v)))
            (assert (= (setq as lst) 2000.0) "2000.0 != ~A" as)))
        (let ((v (assoc "key_bool" lst :test #'string=)))
          (let ((lst (cdr v)))
            (assert (eq (setq as lst) t) "t != ~A" as)))
        (let ((v (assoc "key_list" lst :test #'string=)))
          (assert (listp (setq as (cdr v))) "~A is not list" as))
        ))
    )
  )

(deftest test-param-default-value ()
  ;; Read parameter 1000 times with default value
  (dotimes (i 1000)
    (assert (equal "foo" (ros::get-param "bar" "foo")))
    )
  )

(run-all-tests)

(exit)