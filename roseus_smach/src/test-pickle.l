(push :debug *features*)
(load "pickle.l")
(require :base64 "lib/llib/base64.l")

;; (print (list 'dump (pickle::dump "hello")))
;; (print (list 'encode (user::base64encode (pickle::dump "hello"))))
;; (print (list 'encode (remove #\newline (user::base64encode (pickle::dump "hello")))))
;; (print (list 'dump (pickle::dump 10)))
;; (print (list 'encode (user::base64encode (pickle::dump 10))))
;; (print (list 'encode (user::base64decode (user::base64encode (pickle::dump 10)))))
;; ;;(pickle::load (user::base64decode "gAJ9cQAu"))
;; ;;(setq msg "VQVoZWxsb3EALg==") ;; 1

;; (setq msg "UydoZWxsbycKcDAKLg==") ;; 0
;; (print msg)
;; (print (user::base64decode msg))
;; (setq a (pickle::load (user::base64decode msg)))
;; (format t "a = [~A]~%" a)

(with-open-file
 (s "test-p.py" :direction :output)
 (format s "#!/usr/bin/env python~%")
 (format s "from __future__ import print_function~%")
 (format s "import base64, pickle~%")
 (format s "with open('test-p.l', 'w') as f:~%")
 (format s "  print('(push :debug *features*)', file=f)~%")
 (format s "  print('(load \"pickle.l\")', file=f)~%")
 (format s "  print('(require :base64 \"lib/llib/base64.l\"))', file=f)~%")
 (dolist (data (list t nil 123 12.3 (format nil "Hello World")
		     (list t 123 "Hello")
		     '((123 . "Hello") ("World" . 12.3))
		     (list 1 2 3 (list "Hello World"))
		     '((123 . ((1 . "Hello")  ("World" . 12.3))))
		     (list (list 1 2 3) '("Hello". "World"))))
   (format s "  data='~A'~%" data)
   (format s "  encode='~A'~%" (user::base64encode (pickle::dump data)))
   (format s "  print('(warning-message 3 \"{} -> {} -> \")'.format(pickle.loads(base64.b64decode(encode)), encode, encode), file=f)~%")
   ;; (format s "  print('(warning-message 3 \"~~A~~%\" (pickle::load (user::base64decode \"{}\"))))'.format(encode), file=f)~%")
   (format s "  print('(warning-message 3 \"-> ~~A~~%\" (pickle::load(user::base64decode \"{}\")))'.format(encode), file=f)~%")
   (format s "  print('{} -> {} -> {}'.format(data, encode, pickle.loads(base64.b64decode(encode))))~%")
   )
 (dotimes (protocol 3)
   (format s "  print('(warning-message 2 \"Check with protocol ~A~~%\")', file=f)~%" protocol)
   (dolist (data (list (cons "False" nil) (cons "None" nil)
		       "123" "12345" "1" "-123" "-1234" "123456789" (cons "1234567898786432101234" 1234567898786432101234)
		       (cons "(1, 2, 3)" '(1 2 3))
		       (cons "[1, 2, 3]" '(1 2 3))
		       (format nil "\"Hello\\nWorld\"")
		       (format nil "\"~A\"" (apply #'concatenate string (map cons #'(lambda (x) (format nil "~A Hello World.." x)) '(0 1 2 3 4 5 6))))
		       (cons "[1, 2, 3, ['Hello', 'World']]"  '(1 2 3 ("Hello" "World")))
		       (cons "(1, 2, 3, ('Hello', 'World'))"  '(1 2 3 ("Hello" "World")))
		       (cons "[1, 2, 3, {'Hello': 'World'}]"  '(1 2 3 (("Hello" . "World"))))
		       (cons "[[1, 2, 3], ['Hello', 'World']]" '((1 2 3) ("Hello" "World")))
		       (cons "[[1, 2, 3], {'Hello': 'World'}]" '((1 2 3) (("Hello" . "World"))))
		       (cons "{123 : 'Hello', 'World': 12.3}" '(("World" . 12.3)(123 . "Hello") ))
		       (cons "{123 : {1: 'Hello', 'World': 12.3}}" '((123 (1 . "Hello") ("World" . 12.3))))
		       ))
     (if (atom data) (setq data (cons data data)))
     (format s "  data=~A~%" (car data))
     (format s "  encode=base64.b64encode(pickle.dumps(data, protocol=~A))~%" protocol)
     (format s "  print('(warning-message 3 \"{} -> {} -> \")'.format(data, encode), file=f)~%")
     (format s "  print('(setq data (pickle::load (user::base64decode \"{}\")))'.format(encode), file=f)~%")
     (format s "  print('(warning-message 3 \"~~A~~%\" data)', file=f)~%")
     (format s "  print('(unless (equal data ~A) (warning-message 1 \"Failed to unpickle data. ~~A is not equal to ~A~~%\" data)(sys::exit -1))', file=f)~%" (if (consp (cdr data)) (format nil "\\'~S" (cdr data)) (cdr data)) (substitute #\space #\" (format nil "~S" (cdr data))))
     )
   )
 (format s "  print('(exit)', file=f)~%"))
 
(dolist (data `(
		(t . "STAxCi4=")
		(nil . "STAwCi4=")
		(nil . "Ti4=")
		("hello" . "UydoZWxsbycKcDAKLg==")
		(10 . "STEwCi4=")
		(12.3 . "RjEyLjMKLg==")
		(,(format nil "Hello~%World") . "UydIZWxsb1xuV29ybGQnCnAwCi4=")
		((1 2 3) . "KGxwMApJMQphSTIKYUkzCmEu")
		((1 12.3 "Hello" t nil) . "KGxwMApJMQphRjEyLjMKYVMnSGVsbG8nCnAxCmFJMDEKYUkwMAphLg==")
		(((0 . "zero") ("Hello" . "World")) . "KGRwMApJMApTJ3plcm8nCnAxCnNTJ0hlbGxvJwpwMgpTJ1dvcmxkJwpwMwpzLg==")))
  (print data)
  (let (str obj)
    (setq str (user::base64decode (cdr data)))
    (setq obj (pickle::load str))
    ;(print "describe 1")
    ;(describe (car data))
    ;(print "describe 2")
    ;(describe obj)
    (format t "check ~A == ~A (from ~A ~A)" (car data) obj str (cdr data))
    (unless (equal (car data) obj)
      (warning-message 1 "pickle load/save failed [~A] -> ~A~%" obj (equal (car data) obj)))
    ))

(exit)
